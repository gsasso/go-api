// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/customer_intelligence.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CustomerIntelligence_FetchCustomer_FullMethodName = "/CustomerIntelligence/FetchCustomer"
)

// CustomerIntelligenceClient is the client API for CustomerIntelligence service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerIntelligenceClient interface {
	FetchCustomer(ctx context.Context, in *CustomerFetchRequest, opts ...grpc.CallOption) (*CustomerFetchResponse, error)
}

type customerIntelligenceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerIntelligenceClient(cc grpc.ClientConnInterface) CustomerIntelligenceClient {
	return &customerIntelligenceClient{cc}
}

func (c *customerIntelligenceClient) FetchCustomer(ctx context.Context, in *CustomerFetchRequest, opts ...grpc.CallOption) (*CustomerFetchResponse, error) {
	out := new(CustomerFetchResponse)
	err := c.cc.Invoke(ctx, CustomerIntelligence_FetchCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerIntelligenceServer is the server API for CustomerIntelligence service.
// All implementations must embed UnimplementedCustomerIntelligenceServer
// for forward compatibility
type CustomerIntelligenceServer interface {
	FetchCustomer(context.Context, *CustomerFetchRequest) (*CustomerFetchResponse, error)
	mustEmbedUnimplementedCustomerIntelligenceServer()
}

// UnimplementedCustomerIntelligenceServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerIntelligenceServer struct {
}

func (UnimplementedCustomerIntelligenceServer) FetchCustomer(context.Context, *CustomerFetchRequest) (*CustomerFetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCustomer not implemented")
}
func (UnimplementedCustomerIntelligenceServer) mustEmbedUnimplementedCustomerIntelligenceServer() {}

// UnsafeCustomerIntelligenceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerIntelligenceServer will
// result in compilation errors.
type UnsafeCustomerIntelligenceServer interface {
	mustEmbedUnimplementedCustomerIntelligenceServer()
}

func RegisterCustomerIntelligenceServer(s grpc.ServiceRegistrar, srv CustomerIntelligenceServer) {
	s.RegisterService(&CustomerIntelligence_ServiceDesc, srv)
}

func _CustomerIntelligence_FetchCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerFetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerIntelligenceServer).FetchCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerIntelligence_FetchCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerIntelligenceServer).FetchCustomer(ctx, req.(*CustomerFetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerIntelligence_ServiceDesc is the grpc.ServiceDesc for CustomerIntelligence service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerIntelligence_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CustomerIntelligence",
	HandlerType: (*CustomerIntelligenceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchCustomer",
			Handler:    _CustomerIntelligence_FetchCustomer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/customer_intelligence.proto",
}
